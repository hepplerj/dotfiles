"        _
" __   _(_)_ __ ___  _ __ ___
" \ \ / / | '_ ` _ \| '__/ __|
"  \ V /| | | | | | | | | (__
"   \_/ |_|_| |_| |_|_|  \___|
"
" Author: Jason Heppler
" Source: http://github.com/hepplerj/dotfiles/
" Last updated: 2015-12-23
" This file changes a lot. Usually used with MacVim, but compatible with vim.

" Vundle plugins
" -------------------------------------------------------------------
set nocompatible
filetype off
set rtp+=~/.dotfiles/vim/vim.symlink/bundle/Vundle.vim
let g:vundle_default_git_proto = 'git'
call vundle#begin()

Plugin 'gmarik/Vundle.vim'
Plugin 'airblade/vim-gitgutter'
Plugin 'Lokaltog/vim-powerline'
Plugin 'scrooloose/syntastic'
Plugin 'SirVer/ultisnips'
Plugin 'altercation/vim-colors-solarized'
Plugin 'honza/vim-snippets'
Plugin 'kien/ctrlp.vim'
Plugin 'rking/ag.vim'
Plugin 'tpope/vim-commentary'
Plugin 'tpope/vim-eunuch'
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-obsession'
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-unimpaired'
Plugin 'tpope/vim-vinegar'
Plugin 'sheerun/vim-polyglot'
Plugin 'reedes/vim-pencil'
Plugin 'reedes/vim-wordy'
Plugin 'reedes/vim-lexical'
Plugin 'pangloss/vim-javascript'

call vundle#end()
filetype plugin indent on

" Encoding
"--------------------------------------------------------------------------
set fileformats=unix,dos,mac
if has("multi_byte")
    set encoding=utf-8
endif

" Mapping
"--------------------------------------------------------------------------
let mapleader = ","

" Buffer navigation
noremap <C-h> <C-w>h
noremap <C-j> <C-w>j
noremap <C-k> <C-w>k
noremap <C-l> <C-w>l

" I want `j` and `k` to work visually, where `down` means the next line
map j gj
map k gk

" I'd rather not reach; escape with `jj`
noremap! jj <Esc>

" General
"--------------------------------------------------------------------------
set showmode
set showcmd
set hidden
set ruler
set backspace=indent,eol,start              " backspace through everything in insert mode
set showmatch                               " highlight matching braces/parens
set smarttab
set history=1000
set undolevels=100
set undofile                                " Vim 7.3 -- maintain undo history between sessions
set undodir=~/.cache/undodir                " where `undofile` puts files
set noerrorbells
set mouse=nicr                              " mouse scrolling
set timeoutlen=2000
set ttimeoutlen=10
set autoread
au FocusLost * :wa                          " save when losing focus (gvim)

" Text formatting 
" -------------------------------------------------------------------
set wrap                                    " soft wrap long lines
set textwidth=78
set tabstop=2                               " a tab is two spaces
set softtabstop=2                           " soft tab is two spaces
set shiftwidth=2                            " # of spaces for autoindenting
set expandtab                               " insert spaces not tabs
set autoindent                              " always set autoindenting on
set copyindent                              " copy prev indentation
set shiftround                              " use shiftwidth when indenting
" Use Q to format paragraph
vnoremap Q gq
nnoremap Q gwap
set formatoptions=tqcwn                     " see :help fo-table

" Display
"--------------------------------------------------------------------------
set t_Co=16                                 " colors!
syntax enable
set background=dark
colorscheme solarized

set display+=lastline                       " show partial last lines
set nolist                                  " don't display space chars
set listchars=tab:▸\ ,eol:¬,trail:·,nbsp:·  " TextMate style space chars
set scrolloff=5                             " cursor 5 lines from top or bottom
set relativenumber
set number
set colorcolumn=81
set synmaxcol=400

let $NVIM_TUI_ENABLE_CURSOR_SHAPE=1
let $NVIM_TUI_ENABLE_TRUE_COLOR=1
set statusline=%f%{fugitive#statusline()}

" Resize the splits if the vim windows is resized
autocmd VimResized * :wincmd =

" Powerline
set laststatus=2
set noshowmode
let g:Powerline_stl_path_style = "short"

" Gitgutter
" -------------------------------------------------------------------
let g:gitgutter_eager = 1
let g:gitgutter_realtime = 1
let g:gitgutter_sign_column_always = 1

let g:gitgutter_sign_added = '█'
let g:gitgutter_sign_modified = '█'
let g:gitgutter_sign_modified_removed = '▁'
let g:gitgutter_sign_removed = '▁'
let g:gitgutter_sign_removed_first_line = '▔'

autocmd BufEnter     * GitGutterAll
autocmd ShellCmdPost * GitGutterAll

" Status line
" -------------------------------------------------------------------
set laststatus=2                            " always show a status line
set statusline=""
set statusline+=%t                          " tail/filename
set statusline+=%m%r%h                      " modified/read only/help
set statusline+=\ [%Y]                      " line endings/type of file
set statusline+=\ %{fugitive#statusline()}  " Git status
set statusline+=%=                          " left/right separator
" Syntastic warning
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
"display a warning if &paste is set
set statusline+=%#error#
set statusline+=%{&paste?'[paste]':''}
set statusline+=%*
" display a warning if the line endings aren't unix
set statusline+=%#warningmsg#
set statusline+=%{&ff!='unix'?'['.&ff.']':''}
set statusline+=%*
" display a warning if file encoding isnt utf-8
set statusline+=%#warningmsg#
set statusline+=%{(&fenc!='utf-8'&&&fenc!='')?'['.&fenc.']':''}
set statusline+=%*
" progress through file
set statusline+=C:%02c,                       " cursor column
set statusline+=L:%03l/%03L                   " cursor line/total lines
set statusline+=\ %P                          " percent through file

" Tab completion
"--------------------------------------------------------------------------
if has('wildmenu')
  set wildmenu                                " Show possible completions on command line
  "set wildmode=list:longest,full             " List all options and complete
  set wildignore+=*.aux,*.bak,*.bbl,*.blg,*.class,*.doc,*.docx,*.dvi,*.fdb_latexmk,*.fls,*.idx,*.ilg,*.ind,*.out,*.png,*.pyc,*.Rout,*.rtf,*.swp,*.synctex.gz,*.toc,*/.hg/*,*/.svn/*,*.mp3,*/_site/*,*~,.DS_Store,*/public/*,*Session.vim*,*.jpeg,*.jpg,*.gif,*.svg,*.log,*.lof,*.zip,*.pdf,*.md.tex
  set suffixes+=*.log,*.zip,*.pdf
endif

" OS X specifics
"--------------------------------------------------------------------------
" Yank text to the OS X clipboard
noremap <leader>y "*y
noremap <leader>yy "*Y

" Preserve indentation while pasting text from the OS X clipboard
noremap <leader>p :set paste<CR>:put  *<CR>:set nopaste<CR>

" Cursorline
"--------------------------------------------------------------------------
" Only show cursorline in the current window and in normal mode.
augroup cline
    au!
    au WinLeave,InsertEnter * set nocursorline
    au WinEnter,InsertLeave * set cursorline
augroup END

" Word count and editing
"--------------------------------------------------------------------------
nmap <silent> <leader>wc g<C-G>
nmap <silent> <leader>lwc :w<CR> :!detex % \| wc -w<CR>

" remove line breaks within paragraphs (softwrap)
" http://superuser.com/questions/200423/join-lines-inside-paragraphs-in-vim
nmap <silent> <leader>sw Go<Esc>:3,$g/^./ .,/^$/-1 join<CR>

" Spell check
"--------------------------------------------------------------------------
setlocal spell spelllang=en_us
set spell
set spellsuggest=10

" Backups
"--------------------------------------------------------------------------
set backup                          " enable backups
set noswapfile                      " it's 2015, Vim.

set undodir=~/.vim/.tmp/undo//       " undo files
set backupdir=~/.vim/.tmp/backup//   " backups
set directory=~/.vim/.tmp/swap//     " swap files

" Make backup folders automatically if they don't already exist.
if !isdirectory(expand(&undodir))
    call mkdir(expand(&undodir), "p")
endif
if !isdirectory(expand(&backupdir))
    call mkdir(expand(&backupdir), "p")
endif
if !isdirectory(expand(&directory))
    call mkdir(expand(&directory), "p")
endif

" Easy filetype switching
"--------------------------------------------------------------------------
nnoremap _fmkd :set ft=markdown<CR>
nnoremap _fjs :set ft=javascript<CR>
nnoremap _fpd :set ft=python<CR>
nnoremap _frb :set ft=ruby<CR>
nnoremap _fd  :set ft=diff<CR>
" execute Ruby on the fly
:map _erb :!ruby %<cr>

autocmd BufNewFile,BufRead *.json set filetype=javascript
autocmd BufRead,BufNewFile *.md set filetype=markdown

" Quick editing
"--------------------------------------------------------------------------
command! -nargs=0 Evimrc e $MYVIMRC
command! -nargs=0 Svimrc source $MYVIMRC
command! -nargs=0 Efunctions e $HOME/.vim/functions.vim

" Search
"--------------------------------------------------------------------------
set hlsearch                    " highlight search matches
set incsearch                   " incremental search
set ignorecase
nnoremap <CR> :noh<CR>          " remove search highlight
set smartcase                   " ignore case in search

" Pandoc 
" -------------------------------------------------------------------
au BufNewFile,BufRead *.markdown,*.md,*.mkd,*.pd,*.pdc,*.pdk,*.pandoc,*.text,*.txt,*.page   set filetype=markdown
" Find the space before Pandoc footnotes
nnoremap <leader><space> /\v^$\n[\^1\]:<CR>:let @/ = ""<CR>
" Convert pandoc buffer to HTML and copy to system clipboard
autocmd FileType markdown nnoremap <buffer> <C-S-x> :write \| let @+ = system("pandoc -t html " . shellescape(expand("%:p")))<CR>
"let g:pandoc#syntax#conceal#use = 0

" Ctrl-P
"--------------------------------------------------------------------------
let g:ctrlp_open_new_file = 'r'             " open new files in same window
let g:ctrlp_map = '<leader>,'
nnoremap <C-P> :CtrlPBuffer<CR>
nnoremap <C-n> : CtrlPTag<CR>
let g:ctrlp_use_caching = 0
let g:ctrlp_clear_cache_on_exit = 1
let g:ctrlp_cache_dir = $HOME.'/.cache/ctrlp'
let g:ctrlp_dotfiles = 0                    " ignore dotfiles and dotdirs
let g:ctrlp_custom_ignore = { 'dir': '\.git$\|\_site$' }

" NERDTree
map <C-t> :NERDTreeToggle<CR>

" Formating file
"--------------------------------------------------------------------------
" Run equalprg on the entire file
nnoremap <silent> <leader>= mpgg=G`p

" Commentary.vim 
" -------------------------------------------------------------------
autocmd FileType apache set commentstring=#\ %s           " comments for Apache
autocmd FileType r set commentstring=#\ %s                " comments for R
autocmd FileType pandoc set commentstring=<!--\ %s\ -->   " comments for pandoc
autocmd FileType js set commentstring=\\ %s               " comments for javascript
autocmd FileType rb set commentstring=#\ %s               " comments for ruby
nmap <C-c> gcc

" Gitit
command! -nargs=1 Wiki execute ":split $HOME/Dropbox/acad/wiki/wikidata/" . fnameescape("<args>.page") | execute ":Gwrite"

" UltiSnips
" -------------------------------------------------------------------
let g:UltiSnipsSnippetDirectories=["$HOME/.dotfiles/vim/vim.symlink/UltiSnips"]
let g:UltiSnipsEditSplit = 'horizontal'
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<b-tab>"
map <F5> :UltiSnipsEdit<CR>

" Syntastic
" -------------------------------------------------------------------
let g:syntastic_always_populate_loc_list=1
let g:syntastic_javascript_checkers=['jshint']
let g:syntastic_error_symbol='✗'
let g:syntastic_warning_symbol='⚠'

" Ag
" -------------------------------------------------------------------
let g:agprg="ag --column --smart-case"

" TagBar
" -------------------------------------------------------------------
map <F3> :TagbarToggle<CR>

" Tabular
" -------------------------------------------------------------------
nnoremap <leader>t= :Tabularize /=<CR>
nnoremap <leader>t, :Tabularize /,<CR>
nnoremap <leader>t: :Tabularize /:\zs<CR>
nnoremap <leader>t# :Tabularize /#\zs<CR>

" YouCompleteMe Tweaks
"--------------------------------------------------------------------------
let g:ycm_add_preview_to_completeopt=0
let g:ycm_confirm_extra_conf=0
set completeopt-=preview

" Writing Environment Plugins
"--------------------------------------------------------------------------
" Lexical 
augroup lexical
	autocmd!
    autocmd FileType markdown,mkd call lexical#init()
    autocmd FileType textile call lexical#init()
    autocmd FileType text call lexical#init({ 'spell': 0 })
augroup END

" Vim Pencil
let g:pencil#wrapModeDefault = 'soft'
augroup pencil
    autocmd!
    autocmd FileType markdown,mkd,md,page,text call pencil#init()
augroup END

let g:neomake_error_sign = {
    \ 'text': '✖',
    \ 'texthl': 'ErrorMsg',
    \ }

" Configure Gist
let g:gist_clip_command = 'pbcopy'
let g:gist_detect_filetype = 1

" configure vim-jsx
let g:jsx_ext_required = 0

" Configure Ack
let g:ackprg = 'ag --nogroup --nocolor --column'

" Source configs
"--------------------------------------------------------------------------
nmap <leader>src :source %<cr>
source $HOME/.vim/abbreviations.vimrc
source $HOME/.vim/functions.vimrc
