"        _
" __   _(_)_ __ ___  _ __ ___
" \ \ / / | '_ ` _ \| '__/ __|
"  \ V /| | | | | | | | | (__
"   \_/ |_|_| |_| |_|_|  \___|
"
" Author: Jason Heppler
" Source: http://github.com/hepplerj/dotfiles/
" Last updated: 2018-05-11
" This file changes a lot. Usually used with MacVim. Used with neovim, 
" but compatible with vim.

call plug#begin('~/.vim/plugged')

Plug 'wakatime/vim-wakatime'
Plug 'justinmk/vim-dirvish'

Plug 'tpope/vim-commentary'
Plug 'easymotion/vim-easymotion'
Plug 'vim-scripts/mru.vim' " open recently opened

Plug 'xolox/vim-notes'
Plug 'xolox/vim-misc'

" Git
Plug 'tpope/vim-rhubarb'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-eunuch'
Plug 'airblade/vim-gitgutter'
Plug 'mattn/gist-vim'

" JavaScript
Plug 'pangloss/vim-javascript'
Plug 'gavocanov/vim-js-indent'
Plug 'mxw/vim-jsx'
Plug 'sbdchd/neoformat'

" Completion
Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins', 'for': ['javascript', 'javascript.jsx'] }

" Searching
Plug 'mhinz/vim-grepper'
Plug 'junegunn/fzf'

" VimScript Utilities
Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-vinegar'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-sleuth'
Plug 'mattn/webapi-vim'

" Syntax
Plug 'w0rp/ale'
Plug 'tmcw/vim-eslint-compiler'

" color schemes
Plug 'nanotech/jellybeans.vim'
Plug 'juanedi/predawn.vim'
Plug 'mhinz/vim-janah'

Plug 'davidoc/taskpaper.vim'
call plug#end()

" Use deoplete.
let g:deoplete#enable_at_startup = 1

set nocompatible

if has('autocmd')
  filetype plugin indent on    " enable plugins, detection and indenting
endif

if has('syntax') && !exists('g:syntax_on')
  syntax on
endif

" Mapping
"--------------------------------------------------------------------------
let mapleader = ","

" Buffer navigation
noremap <C-h> <C-w>h
noremap <C-j> <C-w>j
noremap <C-k> <C-w>k
noremap <C-l> <C-w>l

" I want `j` and `k` to work visually, where `down` means the next line
map j gj
map k gk

" I'd rather not reach; escape with `jj`
noremap! jj <Esc>

" Fast saving
nmap <leader>w :w!<cr>

" Performance: highlighting ends after 400 columns
set synmaxcol=400

" Keybindings
"--------------------------------------------------------------------------
nnoremap <C-k> :tabnext<CR>
nnoremap <C-j> :tabprevious<CR>
nnoremap <C-p> :FZF<CR>
nnoremap <C-l> :FZF<CR> %<Tab>
nnoremap <Leader>w :update<CR>
nnoremap <Leader>q :q<CR>
nnoremap <Leader>Q :qa<CR>
nmap <leader>a :GrepperRg 

autocmd BufNewFile,BufRead *.json set filetype=javascript
autocmd BufRead,BufNewFile *.md set filetype=markdown
autocmd BufWinLeave * call clearmatches()

" General
"--------------------------------------------------------------------------
set noerrorbells
set novisualbell
set number
set ignorecase                " ignore case when searching
set smartcase                 " try to be smart about cases
set incsearch                 " search act like modern browsers
set hlsearch                  " highlight search results
set colorcolumn=81
set wildmenu                  " turn on Wild Menu
set wildignore+=node_modules
set splitright
set ttimeout
set ttimeoutlen=0
set showmode
set showcmd
set lazyredraw                " don't redraw when executing macros
set hidden
set ruler
set cmdheight=2
set backspace=indent,eol,start	" backspace through everything in insert mode
set showmatch
set mat=2
set smarttab
set history=1000
set undolevels=100
set undofile
set undodir=~/.cache/undodir
set autoread                   " Set to auto read when file changed from outside
au FocusLost * :wa

" Appearance
"--------------------------------------------------------------------------
let $NVIM_TUI_ENABLE_CURSOR_SHAPE=1
let $PATH .= ':node_modules/.bin/:/Users/jheppler/.cargo/bin/'
set termguicolors
set statusline=%f%{fugitive#statusline()}
set background=dark
colorscheme jellybeans 

" Disable highlight when <leader><cr> is pressed
map <silent> <leader><cr> :noh<cr>

" Text formatting
"--------------------------------------------------------------------------
set wrap
set linebreak
set textwidth=78
set tabstop=4
set softtabstop=4
set shiftwidth=4
set expandtab
set autoindent
set copyindent
set shiftround
" Use Q to format paragraph
vnoremap Q gq
nnoremap Q gwap

set formatoptions=
set formatoptions-=t              " don't autowrap text
set formatoptions+=c              " do autowrap comments
set formatoptions+=r              " automatically continue comments
set formatoptions+=o              " automatically continue comments when hitting 'o' or 'O'
set formatoptions+=q              " allow formating of comments with 'gq'
set formatoptions+=n              " recognize numbered lists
set formatoptions+=l " don't break long lines that were already there

" Spell checking
" Press ,ss to toggle spell check
map <leader>ss :setlocal spell!<cr>

map <leader>sn ]s
map <leader>sp [s
map <leader>sa zg
map <leader>s? z=

" Vimroom

let g:goyo_width=100
let g:goyo_margin_top=2
let g:goyo_margin_bottom=2
nnoremap <silent> <leader>Z :Goyo<cr>


" MRU
"--------------------------------------------------------------------------
map <leader>r :MRU<CR>

" vim-javascript
"--------------------------------------------------------------------------
let g:javascript_plugin_jsdoc = 1
let g:javascript_plugin_flow = 1

" mxw/vim-jsx
"--------------------------------------------------------------------------
let g:jsx_ext_required = 0

" Configure Gist
"--------------------------------------------------------------------------
let g:gist_clip_command = 'pbcopy'
let g:gist_detect_filetype = 1

set shell=/usr/local/bin/zsh

let g:grepper = {}
let g:grepper.tools = ['rg']
let g:grepper.simple_prompt = 1
let g:grepper.quickfix = 1
let g:grepper.highlight = 1

autocmd BufReadPost quickfix noremap <silent> <buffer> o  <CR>
autocmd BufReadPost quickfix noremap <silent> <buffer> t  <C-w><CR><C-w>T
autocmd BufReadPost quickfix noremap <silent> <buffer> T  <C-w><CR><C-w>TgT<C-W><C-W>
autocmd BufReadPost quickfix noremap <silent> <buffer> v <C-w><CR><C-w>H<C-W>b<C-W>J<C-W>t

" vim markdown
let g:vim_markdown_folding_disabled = 1
let g:vim_markdown_fenced_languages = ['js=javascript']
let g:vim_markdown_frontmatter = 1

" Source configs
"--------------------------------------------------------------------------
nmap <leader>src :source %<cr>
source $HOME/.vim/abbreviations.vimrc
source $HOME/.vim/functions.vimrc
