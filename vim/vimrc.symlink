"        _
" __   _(_)_ __ ___  _ __ ___
" \ \ / / | '_ ` _ \| '__/ __|
"  \ V /| | | | | | | | | (__
"   \_/ |_|_| |_| |_|_|  \___|
"
" Author: Jason Heppler
" Source: http://github.com/hepplerj/dotfiles/
" Last updated 2013-08-23
" This file changes a lot. I'll document things whenever I have time to kill.

" Compatibility
"--------------------------------------------------------------------------
set nocompatible            " choose no compatibility with legacy vi
execute pathogen#infect()
"filetype off                "required for Vundle
filetype plugin indent on   "required for Vundle

" Vundle
"--------------------------------------------------------------------------
"set rtp+=~/.vim/bundle/vundle/
"call vundle#rc()

" Let Vundle manage Vundle
" Required!
"Bundle 'gmarik/vundle'

" My Bundles
"Bundle 'molokai'
"Bundle 'tpope/vim-fugitive'
"Bundle 'tpope/vim-git'
"Bundle 'tpope/vim-markdown'
"Bundle 'kien/ctrlp.vim'
"Bundle 'Valloric/YouCompleteMe'
"Bundle 'altercation/vim-colors-solarized'
"Bundle 'Lokaltog/vim-powerline'
"Bundle 'surround.vim'
"Bundle 'closetag.vim'
"Bundle 'scrooloose/nerdtree'
"Bundle 'airblade/vim-gitgutter'
"Bundle 'file:///Users/jheppler/.dotfiles/vim/vim.symlink/bundle/vim-pandoc-kit'

" Encoding
"--------------------------------------------------------------------------
set fileformats=unix,dos,mac
if has("multi_byte")
    set encoding=utf-8
endif

" Basic options
"--------------------------------------------------------------------------
set encoding=utf-8
set modelines=0
set autoindent
set showmode
set showcmd
set hidden
set visualbell
set ttyfast
set ruler
set backspace=indent,eol,start
set nonumber
set norelativenumber
set laststatus=2
set history=1000
set undofile
set undoreload=10000
set list
set listchars=tab:▸\ ,eol:·,extends:❯,precedes:❮
set lazyredraw
set matchtime=3
set showbreak=↪
set splitbelow
set splitright
set autowrite
set autoread
set shiftround
set title
set linebreak
set dictionary=/usr/share/dict/words
set spellfile=~/.vim/custom-dictionary.utf-8.add
set colorcolumn=+1

" Time out on key codes but not mappings
set notimeout
set ttimeout
set ttimeoutlen=10

" Better Completion
set complete=.,w,b,u,t
set completeopt=longest,menuone,preview

" Leader
let mapleader = ","
let maplocalleader = "\\"

" Cursorline 
"--------------------------------------------------------------------------
" Only show cursorline in the current window and in normal mode.
augroup cline
    au!
    au WinLeave,InsertEnter * set nocursorline
    au WinEnter,InsertLeave * set cursorline
augroup END

" Wildmenu completion
"--------------------------------------------------------------------------
set wildmenu
set wildmode=list:longest

set wildignore+=.hg,.git,.svn                    " Version control
set wildignore+=*.aux,*.out,*.toc                " LaTeX intermediate files
set wildignore+=*.jpg,*.bmp,*.gif,*.png,*.jpeg   " binary images
set wildignore+=*.o,*.obj,*.exe,*.dll,*.manifest " compiled object files
set wildignore+=*.spl                            " compiled spelling word lists
set wildignore+=*.sw?                            " Vim swap files
set wildignore+=*.DS_Store                       " OSX bullshit

set wildignore+=*.pyc                            " Python byte code

set wildignore+=*.orig                           " Merge resolution files

" Tabs, spaces, wrapping
"--------------------------------------------------------------------------
set tabstop=8
set shiftwidth=4
set softtabstop=4
set expandtab
set wrap
set textwidth=80
set formatoptions=qrn1
set colorcolumn=+1

" Backups
"--------------------------------------------------------------------------

set backup                        " enable backups
set noswapfile                    " it's 2013, Vim.

set undodir=~/.vim/tmp/undo//     " undo files
set backupdir=~/.vim/tmp/backup// " backups
set directory=~/.vim/tmp/swap//   " swap files

" Make those folders automatically if they don't already exist.
if !isdirectory(expand(&undodir))
    call mkdir(expand(&undodir), "p")
endif
if !isdirectory(expand(&backupdir))
    call mkdir(expand(&backupdir), "p")
endif
if !isdirectory(expand(&directory))
    call mkdir(expand(&directory), "p")
endif
" }}}

" Convenience mappings
"--------------------------------------------------------------------------

" Go away, help key.
noremap  <F1> <nop>
inoremap <F1> <nop>

" Stop it, hash key.
inoremap # X<BS>#

" Kill window
nnoremap K :q<cr>

" Toggle line numbers
nnoremap <leader>n :setlocal number!<cr>

" Sort lines
nnoremap <leader>s vip:!sort<cr>
vnoremap <leader>s :!sort<cr>

" Tabs
nnoremap <leader>( :tabprev<cr>
nnoremap <leader>) :tabnext<cr>

" Move between buffers
map <C-n> :bnext<CR>
map <C-p> :bprev<CR>

" buffer navigation
noremap <C-h> <C-w>h
noremap <C-j> <C-w>j
noremap <C-k> <C-w>k
noremap <C-l> <C-w>l

" Preserve indentation while pasting text from the OS X clipboard
noremap <leader>p :set paste<CR>:put  *<CR>:set nopaste<CR>

" I want `j` and `k` to work visually, where `down` means the next line
map j gj
map k gk
noremap! jj <Esc>

" Colorscheme
"--------------------------------------------------------------------------
syntax on
set background=dark
colorscheme solarized

" enable fancy mode with Powerline
let g:Powerline_symbols = 'fancy'
let g:Powerline_cache_enabled = 1

" Easy filetype switching
"--------------------------------------------------------------------------

nnoremap _md :set ft=markdown<CR>
nnoremap _jt :set ft=htmljinja<CR>
nnoremap _js :set ft=javascript<CR>
nnoremap _pd :set ft=python.django<CR>
nnoremap _d  :set ft=diff<CR>

" Quick editing
"--------------------------------------------------------------------------
nnoremap <leader>ev :vsplit $MYVIMRC<cr>
nnoremap <leader>em :vsplit ~/.mutt/muttrc<cr>

" Searching and movement
"--------------------------------------------------------------------------

" Use sane regexes.
nnoremap / /\v
vnoremap / /\v

set ignorecase
set smartcase
set incsearch
set showmatch
set hlsearch
set gdefault

set scrolloff=3
set sidescroll=1
set sidescrolloff=10

set virtualedit+=block

noremap <silent> <leader><space> :noh<cr>:call clearmatches()<cr>

" Ctrl-P
"--------------------------------------------------------------------------

let g:ctrlp_dont_split = 'NERD_tree_2'
let g:ctrlp_jump_to_buffer = 0
let g:ctrlp_working_path_mode = 0
let g:ctrlp_match_window_reversed = 1
let g:ctrlp_split_window = 0
let g:ctrlp_max_height = 20
let g:ctrlp_extensions = ['tag']

let g:ctrlp_map = '<leader>,'
nnoremap <leader>. :CtrlPTag<cr>

" Markdown specifics
"--------------------------------------------------------------------------

" writing mode
func! WordProcessorMode()
    setlocal formatoptions=t1
    setlocal textwidth=100
    map j gj
    map k gk
    setlocal spell spelllang=en_us
    setlocal noexpandtab
    set tw=72
    set fo=cqt
    set wm=0
endfu
com! WP call WordProcessorMode()

" Launch Marked.app to preview markdown files
:nnoremap <leader>ma :silent !open -a Marked.app '%:p' :redraw!<cr>

function! Formd(option)
    :let save_view = winsaveview()
    :let flag = a:option
    :if flag == "-r"
        :%! ~/bin/formd/formd -r
    :elseif flag == "-i"
        :%! ~/bin/formd/formd -i
    :else
        :%! ~/bin/formd/formd -f
    :endif
    :call winrestview(save_view)
endfunction

" formd mappings
nmap <leader>fr :call Formd("-r")<CR>
nmap <leader>fi :call Formd("-i")<CR>
nmap <leader>f :call Formd("-f")<CR>

" spell check
set spelllang=en_us
set spell
set spellsuggest=10
nnoremap <silent> <leader>sp :set spell!<CR>

" Source configuration files
"--------------------------------------------------------------------------
nmap <leader>src :source %<cr>
source $HOME/.vim/abbreviations.vimrc
source $HOME/.vim/bibtex.vimrc
source $HOME/.vim/gitit.vimrc
source $HOME/.vim/markdown.vimrc
source $HOME/.vim/pandoc.vimrc
source $HOME/.vim/functions.vimrc
