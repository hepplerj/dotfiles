"        _
" __   _(_)_ __ ___  _ __ ___
" \ \ / / | '_ ` _ \| '__/ __|
"  \ V /| | | | | | | | | (__
"   \_/ |_|_| |_| |_|_|  \___|
"
" Author: Jason Heppler
" Source: http://github.com/hepplerj/dotfiles/
" Last updated: 2017-03-22 
" This file changes a lot. Usually used with MacVim, but compatible with vim.

set nocompatible
filetype off

call plug#begin('~/.vim/plugged')

Plug 'justinmk/vim-dirvish'
Plug 'tpope/vim-commentary'
Plug 'easymotion/vim-easymotion'

" Git
Plug 'tpope/vim-rhubarb'
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'
Plug 'mattn/gist-vim'

" JavaScript
Plug 'pangloss/vim-javascript'
Plug 'gavocanov/vim-js-indent'
Plug 'mxw/vim-jsx'
Plug 'sbdchd/neoformat'

" Completion
Plug 'ervandew/supertab'
Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins', 'for': ['javascript', 'javascript.jsx'] }
Plug 'carlitux/deoplete-ternjs', { 'for': ['javascript', 'javascript.jsx'], 'do': 'npm install -g tern' }
Plug 'ternjs/tern_for_vim', { 'for': ['javascript', 'javascript.jsx'], 'do': 'npm install' }
Plug 'flowtype/vim-flow', { 'for': ['javascript', 'javascript.jsx'] }

" Searching
Plug 'mileszs/ack.vim'
Plug 'junegunn/fzf'

" VimScript Utilities
"" Used by gist-vim and rust.vim
Plug 'mattn/webapi-vim'

Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-vinegar'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-sleuth'

" Syntax
Plug 'w0rp/ale'
Plug 'tmcw/vim-eslint-compiler'

" Languages
Plug 'fatih/vim-go', { 'for': ['go'] }
Plug 'tikhomirov/vim-glsl'
Plug 'rust-lang/rust.vim', { 'for': ['rust'] }
Plug 'ElmCast/elm-vim', { 'for': ['elm'] }
Plug 'sebastianmarkow/deoplete-rust'

" color schemes
Plug 'nanotech/jellybeans.vim'
Plug 'chriskempson/base16-vim'
Plug 'morhetz/gruvbox'
Plug 'juanedi/predawn.vim'
Plug 'cocopon/iceberg.vim'
Plug 'mhinz/vim-janah'
call plug#end()

if has('autocmd')
  filetype plugin indent on    " enable plugins, detection and indenting
endif

if has('syntax') && !exists('g:syntax_on')
  syntax on
endif

" Encoding
"--------------------------------------------------------------------------
set fileformats=unix,dos,mac
if has("multi_byte")
    set encoding=utf-8
endif

" Appearance
"--------------------------------------------------------------------------
" Needed to correct a problem with terminal vim 
" and termguicolors
let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"

let $NVIM_TUI_ENABLE_CURSOR_SHAPE=1
let $PATH .= ':node_modules/.bin/:/Users/jheppler/.cargo/bin/'
set background=dark
set statusline=%f%{fugitive#statusline()}
colorscheme janah

" Mapping
"--------------------------------------------------------------------------
let mapleader = ","

" Buffer navigation
noremap <C-h> <C-w>h
noremap <C-j> <C-w>j
noremap <C-k> <C-w>k
noremap <C-l> <C-w>l

" I want `j` and `k` to work visually, where `down` means the next line
map j gj
map k gk

" I'd rather not reach; escape with `jj`
noremap! jj <Esc>

" General
"--------------------------------------------------------------------------
set termguicolors
set visualbell
set noerrorbells
set number
set showmode
set showcmd
set hidden
set ruler
set backspace=indent,eol,start              " backspace through everything in insert mode
set showmatch                               " highlight matching braces/parens
set smarttab
set history=1000
set undolevels=100
set undofile                                " Vim 7.3 -- maintain undo history between sessions
set undodir=~/.cache/undodir                " where `undofile` puts files
set mouse=nicr                              " mouse scrolling
set timeoutlen=2000
set ttimeoutlen=10
set autoread                                " automatically update file when edited outside of vim
set colorcolumn=81
set synmaxcol=400
au FocusLost * :wa                          " save when losing focus (gvim)

" Text formatting 
" -------------------------------------------------------------------
set wrap                                    " soft wrap long lines
set textwidth=78
set tabstop=2                               " a tab is two spaces
set softtabstop=2                           " soft tab is two spaces
set shiftwidth=2                            " # of spaces for autoindenting
set expandtab                               " insert spaces not tabs
set autoindent                              " always set autoindenting on
set copyindent                              " copy prev indentation
set shiftround                              " use shiftwidth when indenting
" Use Q to format paragraph
vnoremap Q gq
nnoremap Q gwap
"set formatoptions=tqcwn                     " see :help fo-table

set formatoptions=
set formatoptions-=t              " don't autowrap text
set formatoptions+=c              " do autowrap comments
set formatoptions+=r              " automatically continue comments
set formatoptions+=o              " automatically continue comments when hitting 'o' or 'O'
set formatoptions+=q              " allow formating of comments with 'gq'
set formatoptions+=n              " recognize numbered lists
set formatoptions+=l              " don't break long lines that were already there

" Resize the splits if the vim windows is resized
autocmd VimResized * :wincmd =

" Gitgutter
" -------------------------------------------------------------------
let g:gitgutter_eager = 1
let g:gitgutter_realtime = 1
let g:gitgutter_sign_column_always = 1

let g:gitgutter_sign_added = '█'
let g:gitgutter_sign_modified = '█'
let g:gitgutter_sign_modified_removed = '▁'
let g:gitgutter_sign_removed = '▁'
let g:gitgutter_sign_removed_first_line = '▔'

autocmd BufEnter     * GitGutterAll
autocmd ShellCmdPost * GitGutterAll

" Tab completion
"--------------------------------------------------------------------------
if has('wildmenu')
  set wildmenu                                " Show possible completions on command line
  "set wildmode=list:longest,full             " List all options and complete
  set wildignore+=*.aux,*.bak,*.bbl,*.blg,*.class,*.doc,*.docx,*.dvi,*.fdb_latexmk,*.fls,*.idx,*.ilg,*.ind,*.out,*.png,*.pyc,*.Rout,*.rtf,*.swp,*.synctex.gz,*.toc,*/.hg/*,*/.svn/*,*.mp3,*/_site/*,*~,.DS_Store,*/public/*,*Session.vim*,*.jpeg,*.jpg,*.gif,*.svg,*.log,*.lof,*.zip,*.pdf,*.md.tex
  set suffixes+=*.log,*.zip,*.pdf
endif

" OS X specifics
"--------------------------------------------------------------------------
" Yank text to the OS X clipboard
noremap <leader>y "*y
noremap <leader>yy "*Y

" Preserve indentation while pasting text from the OS X clipboard
noremap <leader>p :set paste<CR>:put  *<CR>:set nopaste<CR>

" Word count
"--------------------------------------------------------------------------
nmap <silent> <leader>lwc :w<CR> :!detex % \| wc -w<CR>

" remove line breaks within paragraphs (softwrap)
" http://superuser.com/questions/200423/join-lines-inside-paragraphs-in-vim
nmap <silent> <leader>sw Go<Esc>:3,$g/^./ .,/^$/-1 join<CR>

" Spell check
"--------------------------------------------------------------------------
setlocal spell spelllang=en_us
set spell
set spellsuggest=10

" Backups
"--------------------------------------------------------------------------
set backup                          " enable backups
set noswapfile                      " it's 2015, Vim.

set undodir=~/.vim/.tmp/undo//       " undo files
set backupdir=~/.vim/.tmp/backup//   " backups
set directory=~/.vim/.tmp/swap//     " swap files

" Make backup folders automatically if they don't already exist.
if !isdirectory(expand(&undodir))
    call mkdir(expand(&undodir), "p")
endif
if !isdirectory(expand(&backupdir))
    call mkdir(expand(&backupdir), "p")
endif
if !isdirectory(expand(&directory))
    call mkdir(expand(&directory), "p")
endif

" Easy filetype switching
"--------------------------------------------------------------------------
nnoremap _fmkd :set ft=markdown<CR>
nnoremap _fjs :set ft=javascript<CR>
nnoremap _fpd :set ft=python<CR>
nnoremap _frb :set ft=ruby<CR>
nnoremap _fd  :set ft=diff<CR>
" execute Ruby on the fly
:map _erb :!ruby %<cr>

autocmd BufNewFile,BufRead *.json set filetype=javascript
autocmd BufRead,BufNewFile *.md set filetype=markdown
autocmd BufWinLeave * call clearmatches()

" Quick editing
"--------------------------------------------------------------------------
"command! -nargs=0 Evimrc e $MYVIMRC<cr>

" open vimrc in new tab for editing
nmap <leader>EV :tabedit $MYVIMRC<cr>

" reload .vimrc
map <silent> <leader>RV :source ~/.vimrc<CR>:filetype detect<CR>:exe ":echo 'vimrc reloaded'"<CR>

" Search
"--------------------------------------------------------------------------
set hlsearch                    " highlight search matches
set incsearch                   " incremental search
set ignorecase
nnoremap <CR> :noh<CR>          " remove search highlight
set smartcase                   " ignore case in search

" vim-javascript
" -------------------------------------------------------------------
let g:javascript_plugin_jsdoc = 1
let g:javascript_plugin_flow = 1
let g:SuperTabDefaultCompletionType = "<c-n>"
let g:tern_request_timeout = 1
let g:tern_show_signature_in_pum = 0
set completeopt-=preview

" mxw/vim-jsx
" -------------------------------------------------------------------
let g:jsx_ext_required = 0

" deoplete
" -------------------------------------------------------------------
let g:deoplete#enable_at_startup = 1
let g:deoplete#file#enable_buffer_path = 1

" Pandoc 
" -------------------------------------------------------------------
au BufNewFile,BufRead *.markdown,*.md,*.mkd,*.pd,*.pdc,*.pdk,*.pandoc,*.text,*.txt,*.page   set filetype=markdown
" Find the space before Pandoc footnotes
nnoremap <leader><space> /\v^$\n[\^1\]:<CR>:let @/ = ""<CR>
" Convert pandoc buffer to HTML and copy to system clipboard
autocmd FileType markdown nnoremap <buffer> <C-S-x> :write \| let @+ = system("pandoc -t html " . shellescape(expand("%:p")))<CR>
"let g:pandoc#syntax#conceal#use = 0

" Writing environment
"--------------------------------------------------------------------------
" turn-on distraction free writing mode for markdown files
au BufNewFile,BufRead *.{md,mdown,mkd,mkdn,markdown,mdwn} call DistractionFreeWriting()
function! DistractionFreeWriting()
    set gfn=Cousine:h14                " font to use
    set noruler                        " don't show ruler
    set linebreak                      " break the lines on words
    set nonumber
    set nu
    set laststatus=0
    set noshowmode
endfunction

" Commentary.vim 
" -------------------------------------------------------------------
autocmd FileType apache set commentstring=#\ %s           " comments for Apache
autocmd FileType r set commentstring=#\ %s                " comments for R
autocmd FileType pandoc set commentstring=<!--\ %s\ -->   " comments for pandoc
autocmd FileType js set commentstring=\\ %s               " comments for javascript
autocmd FileType rb set commentstring=#\ %s               " comments for ruby
nmap <C-c> gcc

" Gitit
command! -nargs=1 Wiki execute ":split $HOME/Dropbox/acad/wiki/wikidata/" . fnameescape("<args>.page") | execute ":Gwrite"

" UltiSnips
" -------------------------------------------------------------------
"let g:UltiSnipsSnippetDirectories=["$HOME/.dotfiles/vim/vim.symlink/UltiSnips"]
let g:UltiSnipsEditSplit = 'horizontal'
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<b-tab>"
map <F5> :UltiSnipsEdit<CR>

" Configure Gist
let g:gist_clip_command = 'pbcopy'
let g:gist_detect_filetype = 1

" Configure Ack
let g:ackprg = 'ag --nogroup --nocolor --column'

" Elm
let g:elm_format_autosave = 1

inoremap <expr><TAB>  pumvisible() ? "<C-n>" : "<TAB>"
" automatically open and close the popup menu / preview window
au CursorMovedI,InsertLeave * if pumvisible() == 0|silent! pclose|endif


" YouCompleteMe Tweaks
"--------------------------------------------------------------------------
let g:ycm_add_preview_to_completeopt=0
let g:ycm_confirm_extra_conf=0
set completeopt-=preview

" Writing Environment Plugins
"--------------------------------------------------------------------------
" Lexical 
augroup lexical
	autocmd!
    autocmd FileType markdown,mkd call lexical#init()
    autocmd FileType textile call lexical#init()
    autocmd FileType text call lexical#init({ 'spell': 0 })
augroup END

" Vim Pencil
let g:pencil#wrapModeDefault = 'soft'
augroup pencil
    autocmd!
    autocmd FileType markdown,mkd,md,page,text call pencil#init()
augroup END

let g:neomake_error_sign = {
    \ 'text': '✖',
    \ 'texthl': 'ErrorMsg',
    \ }

" vim-markdown settings
let g:vim_markdown_folding_disabled = 1 " turn off folding
let g:vim_markdown_conceal = 0          " turn off conceal
set conceallevel=2

" Configure Gist
let g:gist_clip_command = 'pbcopy'
let g:gist_detect_filetype = 1

" configure vim-jsx
let g:jsx_ext_required = 0

" Configure Ack
let g:ackprg = 'ag --nogroup --nocolor --column'

" insert cursor
if $TERM_PROGRAM =~ "iTerm"
    let &t_SI = "\<Esc>]50;CursorShape=1\x7" " Vertical bar in insert mode
    let &t_EI = "\<Esc>]50;CursorShape=0\x7" " Block in normal mode
endif

" Better pasting from clipboard
" http://tilvim.com/2014/03/18/a-better-paste.html
map <Leader>p :set paste<CR>o<esc>"*]p:set nopaste<cr>

set clipboard=unnamed   " yank and paste with the system clipboard

" never engage ex mode
" http://www.bestofvim.com/tip/leave-ex-mode-good/
nnoremap Q <nop>

" Source configs
"--------------------------------------------------------------------------
nmap <leader>src :source %<cr>
source $HOME/.vim/abbreviations.vimrc
source $HOME/.vim/functions.vimrc
