"        _
" __   _(_)_ __ ___  _ __ ___
" \ \ / / | '_ ` _ \| '__/ __|
"  \ V /| | | | | | | | | (__
"   \_/ |_|_| |_| |_|_|  \___|
"
" Author: Jason Heppler
" Source: http://github.com/hepplerj/dotfiles/
" Last updated 2014-02-04
" This file changes a lot. I'll document things whenever I have time to kill.

" Compatibility
"--------------------------------------------------------------------------
set nocompatible            " choose no compatibility with legacy vi

" Pathogen
"--------------------------------------------------------------------------
execute pathogen#infect()
filetype plugin indent on   " required for Pathogen

" Encoding
"--------------------------------------------------------------------------
set fileformats=unix,dos,mac
if has("multi_byte")
    set encoding=utf-8
endif

" Leader
let mapleader = ","

" Vim options
"--------------------------------------------------------------------------
set autoindent                  " carry over indent from previous line
set autoread                    " don't bother me
set backspace=indent,eol,start  " backspace through everything in insert mode
set cindent                     " automatic indenting
set cinkeys-=0#                 " comments don't fiddle with indenting
set expandtab                   " no tabs
set formatoptions=tcqn1         " t - autowrap normal text
                                " c - autowrap comments
                                " q - gq formats comments
                                " n - autowrap lists
                                " 1 - break *before* single letter words
set hidden                      " don't prompt to save hidden windows until exit
set history=500                 " how many lines of history to save
set hlsearch                    " highlight search matches
set incsearch                   " incremental search
set ignorecase                  " case insensitive
nnoremap <CR> :noh<CR>          " remove search highlight
set infercase
set laststatus=2                " always show status bar
set linebreak                   " break long lines by word, not char
set list                        " show invisible characters in listchars
set list listchars=tab:\ \ ,trail:Â·
set nocindent                   " turn off 'C' indenting, stops problem of
                                " newline indenting after a comma
set ruler                       " show row/col and percentage
set smartcase                   " ignore case in search
set smarttab
set showmatch                   " highlight matching braces/parens
set shiftround                  " shift to certain columns, not just spaces
set shiftwidth=4                " number of spaces to shift for autoindent
set softtabstop=4               " spaces 'feel' like tabs
set tabstop=4                   " One True Tab
set undofile                    " Vim 7.3 -- maintain undo history between sessions
set undodir=~/.cache/undodir    " where `undofile` puts files
set wildmenu                    " Show possible completions on command line
set wildmode=list:longest,full  " List all options and complete
set wildignore=*.class,*.o,*~,*.pyc,.git,node_modules  " Ignore certain files in tab-completion

set complete=.,w,t
function! InsertTabWrapper()
  let col = col('.') - 1
  if !col || getline('.')[col - 1] !~ '\k'
    return "\<tab>"
  else
    return "\<c-p>"
  endif
endfunction
inoremap <Tab> <c-r>=InsertTabWrapper()<cr>

" Yank text to the OS X clipboard
noremap <leader>y "*y
noremap <leader>yy "*Y

" Preserve indentation while pasting text from the OS X clipboard
noremap <leader>p :set paste<CR>:put  *<CR>:set nopaste<CR>

" Cursorline
"--------------------------------------------------------------------------
" Only show cursorline in the current window and in normal mode.
augroup cline
    au!
    au WinLeave,InsertEnter * set nocursorline
    au WinEnter,InsertLeave * set cursorline
augroup END

" Tabs, spaces, wrapping
"--------------------------------------------------------------------------
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab
set textwidth=80

" toggle automatic hardwrapping
nmap <silent> <leader>wa :set fo-=a<CR>
nmap <silent> <leader>aw :set fo+=a<CR>

" Word count
"--------------------------------------------------------------------------
nmap <silent> <leader>wc g<C-G>
nmap <silent> <leader>lwc :w<CR> :!detex % \| wc -w<CR>

" Backups
"--------------------------------------------------------------------------
set backup                        " enable backups
set noswapfile                    " it's 2014, Vim.

set undodir=~/.vim/tmp/undo//     " undo files
set backupdir=~/.vim/tmp/backup// " backups
set directory=~/.vim/tmp/swap//   " swap files

" Make those folders automatically if they don't already exist.
if !isdirectory(expand(&undodir))
    call mkdir(expand(&undodir), "p")
endif
if !isdirectory(expand(&backupdir))
    call mkdir(expand(&backupdir), "p")
endif
if !isdirectory(expand(&directory))
    call mkdir(expand(&directory), "p")
endif

" Convenience mappings
"--------------------------------------------------------------------------

" Go away, help key.
noremap  <F1> <nop>
inoremap <F1> <nop>

" Toggle line numbers
nnoremap <leader>n :setlocal number!<cr>
set numberwidth=5

" Buffer navigation
noremap <C-h> <C-w>h
noremap <C-j> <C-w>j
noremap <C-k> <C-w>k
noremap <C-l> <C-w>l

" I want `j` and `k` to work visually, where `down` means the next line
map j gj
map k gk

" Escape with 'jj'
noremap! jj <Esc>

" Get off my lawn
nnoremap <Left> :echoe "Use h"<CR>
nnoremap <Right> :echoe "Use l"<CR>
nnoremap <Up> :echoe "Use k"<CR>
nnoremap <Down> :echoe "Use j"<CR>

" Tab mapping for YouCompleteMe
imap <Tab> <C-P>

" Color and syntax
"--------------------------------------------------------------------------

" Make sure colored syntax is on, and make it work with 256 terminals
if $TERM == "xterm-256color" || $TERM == "screen-256color" || $COLORTERM == "gnome-terminal"
     colorscheme badwolf
     set background=dark
     set t_Co=256
     "colorscheme tomorrow_night
elseif has ("terminfo")
    colorscheme default
    set t_Co=8
    set t_Sf=[3%p1%dm
    set t_Sb=[4%p1%dm
else
    colorscheme default
    set t_Co=8
    set t_Sf=[3%dm
    set t_Sb=[4%dm
endif
syntax enable
set guifont=Menlo\ Regular:h16

" enable fancy mode with Powerline
let g:Powerline_symbols = 'fancy'
let g:Powerline_cache_enabled = 1

" Easy filetype switching
"--------------------------------------------------------------------------

nnoremap _md :set ft=markdown<CR>
nnoremap _js :set ft=javascript<CR>
nnoremap _pd :set ft=python<CR>
nnoremap _rb :set ft=ruby<CR>
nnoremap _d  :set ft=diff<CR>

" execute Ruby on the fly
:map _rb :!ruby %<cr>

" Quick editing
"--------------------------------------------------------------------------
nnoremap <leader>ev :vsplit $MYVIMRC<cr>
nnoremap <leader>em :vsplit ~/.mutt/muttrc<cr>

" Searching and movement
"--------------------------------------------------------------------------

" Use sane regexes.
nnoremap / /\v
vnoremap / /\v

set ignorecase
set smartcase
set incsearch
set showmatch
set hlsearch
set gdefault

set scrolloff=3
set sidescroll=1
set sidescrolloff=10

set virtualedit+=block

noremap <silent> <leader><space> :noh<cr>:call clearmatches()<cr>

" Ctrl-P
"--------------------------------------------------------------------------

let g:ctrlp_dont_split = 'NERD_tree_2'
let g:ctrlp_jump_to_buffer = 0
let g:ctrlp_working_path_mode = 0
let g:ctrlp_match_window_reversed = 1
let g:ctrlp_split_window = 0
let g:ctrlp_max_height = 20
let g:ctrlp_extensions = ['tag']

let g:ctrlp_map = '<leader>,'
nnoremap <leader>. :CtrlPTag<cr>
nnoremap <leader>,; :CtrlPBuffer<cr>

" Markdown specifics
"--------------------------------------------------------------------------

" Format text with Pandoc
nnoremap <silent> <leader>= mpgg/\v^(\w\|\#)<CR>=G`p :let @/ = ""<CR>

" writing mode
func! WordProcessorMode()
    setlocal formatoptions=t1
    setlocal textwidth=100
    map j gj
    map k gk
    setlocal spell spelllang=en_us
    setlocal noexpandtab
    set tw=72
    set fo=cqt
    set wm=0
endfu
com! WP call WordProcessorMode()

" Launch Marked.app to preview markdown files
:nnoremap <leader>ma :silent !open -a Marked.app '%:p' :redraw!<cr>

function! Formd(option)
    :let save_view = winsaveview()
    :let flag = a:option
    :if flag == "-r"
        :%! ~/bin/formd/formd -r
    :elseif flag == "-i"
        :%! ~/bin/formd/formd -i
    :else
        :%! ~/bin/formd/formd -f
    :endif
    :call winrestview(save_view)
endfunction

" formd mappings
nmap <leader>fr :call Formd("-r")<CR>
nmap <leader>fi :call Formd("-i")<CR>
nmap <leader>f :call Formd("-f")<CR>

" Enable spellcheck for Markdown 
autocmd FileType markdown setlocal spell

" Mouse scrolling
set mouse=nicr

" Fast saving
nmap <leader>w :w!<cr>

" Source configuration files
"--------------------------------------------------------------------------
nmap <leader>src :source %<cr>
source $HOME/.vim/abbreviations.vimrc
source $HOME/.vim/bibtex.vimrc
source $HOME/.vim/gitit.vimrc
source $HOME/.vim/markdown.vimrc
source $HOME/.vim/pandoc.vimrc
source $HOME/.vim/functions.vimrc
